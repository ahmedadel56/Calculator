{"version":3,"sources":["logic/operate.js","components/Calculator.js","logic/calculate.js","App.js","reportWebVitals.js","index.js"],"names":["operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","err","mod","Error","Calculator","useState","total","next","state","setState","numbersHandler","e","target","innerHTML","operationHandler","handleResults","obj","buttonName","calculation","match","includes","parseFloat","className","type","onClick","App","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc3339b2.chunk.js","sourcesContent":["import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  if (operation === 'รท') {\n    try {\n      return one.div(two).toString();\n    } catch (err) {\n      return \"Can't divide by 0.\";\n    }\n  }\n  if (operation === '%') {\n    return one.mod(two).toString();\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import React, { useState } from 'react';\nimport '../components-style/Calculator.css';\nimport calculate from '../logic/calculate';\n\nconst Calculator = () => {\n  const [state, setState] = useState({\n    total: null,\n    next: null,\n    operation: null,\n  });\n\n  const numbersHandler = (e) => {\n    const { total, next, operation } = state;\n\n    if (!total && !operation) {\n      setState({ ...state, total: e.target.innerHTML });\n    } else if (total && !operation) {\n      setState({ ...state, total: total + e.target.innerHTML });\n    } else if (total && operation && !next) {\n      setState({ ...state, next: e.target.innerHTML });\n    } else {\n      setState({ ...state, next: next + e.target.innerHTML });\n    }\n  };\n\n  const operationHandler = (e) => {\n    setState({ ...state, operation: e.target.innerHTML });\n  };\n\n  const handleResults = (e) => {\n    const calculation = calculate(state, e.target.innerHTML);\n\n    setState(calculation);\n  };\n\n  const { total, next, operation } = state;\n\n  return (\n    <div className=\"container\">\n      <div className=\"output\">\n        {total || 0}\n        {operation}\n        {next}\n      </div>\n      <div className=\"buttons\">\n        <button type=\"button\" onClick={handleResults}>\n          AC\n        </button>\n        <button type=\"button\" onClick={handleResults}>\n          +/-\n        </button>\n        <button type=\"button\" onClick={operationHandler}>\n          %\n        </button>\n        <button type=\"button\" onClick={operationHandler}>\n          รท\n        </button>\n        <button type=\"button\" onClick={numbersHandler}>\n          7\n        </button>\n        <button type=\"button\" onClick={numbersHandler}>\n          8\n        </button>\n        <button type=\"button\" onClick={numbersHandler}>\n          9\n        </button>\n        <button type=\"button\" operation=\"x\" onClick={operationHandler}>\n          x\n        </button>\n        <button type=\"button\" onClick={numbersHandler}>\n          4\n        </button>\n        <button type=\"button\" onClick={numbersHandler}>\n          5\n        </button>\n        <button type=\"button\" onClick={numbersHandler}>\n          6\n        </button>\n        <button type=\"button\" operation=\"-\" onClick={operationHandler}>\n          -\n        </button>\n        <button type=\"button\" onClick={numbersHandler}>\n          1\n        </button>\n        <button type=\"button\" onClick={numbersHandler}>\n          2\n        </button>\n        <button type=\"button\" onClick={numbersHandler}>\n          3\n        </button>\n        <button type=\"button\" operation=\"+\" onClick={operationHandler}>\n          +\n        </button>\n        <button\n          type=\"button\"\n          buttonName=\"0\"\n          className=\"not-equal\"\n          onClick={numbersHandler}\n        >\n          0\n        </button>\n        <button type=\"button\" buttonName=\".\" onClick={handleResults}>\n          .\n        </button>\n        <button type=\"button\" buttonName=\"=\" onClick={handleResults}>\n          =\n        </button>\n      </div>\n    </div>\n  );\n};\nexport default Calculator;\n","import operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { ...obj, next: obj.next + buttonName };\n      }\n      return { ...obj, next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return { ...obj };\n      }\n      return { ...obj, next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: '0.' };\n    }\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n      return { total: `${obj.total}.` };\n    }\n    return { total: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { ...obj, next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { ...obj, total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation after pressing '='\n  if (!obj.next && obj.total && !obj.operation) {\n    return { ...obj, operation: buttonName };\n  }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    if (obj.total && !obj.next) {\n      return { ...obj, operation: buttonName };\n    }\n\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","import React from 'react';\nimport './App.css';\nimport Calculator from './components/Calculator';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Calculator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}